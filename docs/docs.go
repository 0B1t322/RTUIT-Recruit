// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/purchases/{uid}": {
            "get": {
                "description": "get All purchase by uid",
                "produces": [
                    "application/json"
                ],
                "summary": "Get All purchases",
                "operationId": "get-all-purchase-by-uid",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/purchase.Purchase"
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add purchase",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add purchase",
                "operationId": "add-purchase-to-uid",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "purchase info",
                        "name": "purchase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.addBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "id of purchase",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "count can't be null",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not found product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/purchases/{uid}/{id}": {
            "get": {
                "description": "get purchase by id",
                "produces": [
                    "application/json"
                ],
                "summary": "Get purchases",
                "operationId": "get-purchase-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the purchase",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/purchase.Purchase"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete purchase for user by id",
                "summary": "Delete purchase",
                "operationId": "delete-purchase-by-id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the user",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the purchase",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/shops/": {
            "get": {
                "description": "get all shops",
                "produces": [
                    "application/json"
                ],
                "summary": "GetAll shops",
                "operationId": "get-all-shops",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/shop.Shop"
                            }
                        }
                    },
                    "404": {
                        "description": "Shop don't find",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a shop",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create shop",
                "operationId": "create-shop",
                "parameters": [
                    {
                        "description": "Information about shop",
                        "name": "shop_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/shop.ShopInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "body is null",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/shops/{id}": {
            "get": {
                "description": "get shop by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a shop",
                "operationId": "get-shop-by-int",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the shop",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/shop.Shop"
                        }
                    },
                    "404": {
                        "description": "Shop don't find",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/shops/{id}/{pid}": {
            "put": {
                "description": "buy product in shop by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Buy product",
                "operationId": "buy-product-in-shop",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the shop",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the product",
                        "name": "pid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UID count and type of payment",
                        "name": "purchase_info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.buyBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/shop.Shop"
                        }
                    },
                    "400": {
                        "description": "NegCount",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Body is null",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "502": {
                        "description": "Faield to connect service purchases",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add product by id to the shop by id",
                "produces": [
                    "application/json"
                ],
                "summary": "Add a product to the shop",
                "operationId": "add-product-to-shop-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authirization Header with hashed secret_key looks like: Token fhdjfho23h4ore",
                        "name": "token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the shop",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the product",
                        "name": "pid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "403": {
                        "description": ""
                    },
                    "404": {
                        "description": "Product don't find",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/shops/{id}/{pid}/{count}": {
            "put": {
                "description": "Add count of the product",
                "produces": [
                    "application/json"
                ],
                "summary": "Add a count of the product",
                "operationId": "add-count-of-product-to-shop-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authirization Header with hashed secret_key looks like: Token fhdjfho23h4ore",
                        "name": "token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the shop",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the product",
                        "name": "pid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the product",
                        "name": "count",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Product don't find",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.addBody": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "payment": {
                    "type": "string"
                },
                "product_id": {
                    "type": "integer"
                },
                "shop_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.buyBody": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "payment": {
                    "type": "string"
                },
                "uid": {
                    "type": "integer"
                }
            }
        },
        "product.Product": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "cost": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "purchase.Purchase": {
            "type": "object",
            "properties": {
                "buy_date": {
                    "type": "string"
                },
                "cost": {
                    "type": "integer"
                },
                "count": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "payment": {
                    "description": "Payment can be cash/card",
                    "type": "string"
                },
                "product": {
                    "$ref": "#/definitions/product.Product"
                },
                "product_id": {
                    "type": "integer"
                },
                "shop": {
                    "$ref": "#/definitions/shop.Shop"
                },
                "shop_id": {
                    "type": "integer"
                },
                "uid": {
                    "type": "integer"
                }
            }
        },
        "shop.Shop": {
            "type": "object",
            "properties": {
                "adress": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "shop_products": {
                    "description": "here product count",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/shop.ShopProduct"
                    }
                }
            }
        },
        "shop.ShopInfo": {
            "type": "object",
            "properties": {
                "adress": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "shop.ShopProduct": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "product": {
                    "$ref": "#/definitions/product.Product"
                },
                "product_id": {
                    "type": "integer"
                },
                "shop_id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
